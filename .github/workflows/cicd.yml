name: CI/CD

on:
  push:
    branches:
      - main
    paths-ignore:
      - .gitignore
      - README.md

  pull_request:
    branches:
      - main
    paths-ignore:
      - .gitignore
      - README.md

  workflow_call:
    inputs:
      build-artifacts:
        type: boolean
        default: false
        required: true

jobs:
  build-ui:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"
          cache-dependency-path: src/ReactUi/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: src/ReactUi

      - name: ESLint
        run: npm run lint
        working-directory: src/ReactUi

      - name: Set up environment file for production
        run: |
          touch .env.production
          echo "VITE_GITHUB_URL=${{ github.server_url }}/${{ github.repository }}" >> .env.production
          echo "VITE_DOCUMENTATION_URL=${{ github.server_url }}/${{ github.repository }}/wiki" >> .env.production
          echo "VITE_BUG_REPORT_URL=${{ github.server_url }}/${{ github.repository }}/issues" >> .env.production
          echo "VITE_FEATURE_REQUEST_URL=${{ github.server_url }}/${{ github.repository }}/issues" >> .env.production
          echo "VITE_TOKEN_ENDPOINT=${{ vars.TOKEN_ENDPOINT }}" >> .env.production
          echo "VITE_LOGOUT_ENDPOINT=${{ vars.LOGOUT_ENDPOINT }}" >> .env.production
          echo "VITE_REDIRECT_URI=${{ vars.REDIRECT_URI }}" >> .env.production
          echo "VITE_CLIENT_ID=${{ vars.CLIENT_ID }}" >> .env.production
          echo "VITE_INVITE_URL=${{ vars.INVITE_URL }}" >> .env.production
        working-directory: src/ReactUi

      - name: Output environment file
        run: cat .env.production
        working-directory: src/ReactUi

      - name: Build React application
        run: npm run build
        working-directory: src/ReactUi

      - name: Cache frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ui-build
          path: src/ReactUi/dist

  build-server:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Install .NET
        uses: actions/setup-dotnet@v4

      - name: Restore solution
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Test solution
        run: dotnet test --no-build --configuration Release

      - name: Build server for Linux x64
        run: |
          dotnet publish --configuration Release --runtime linux-x64 --self-contained --output ${{ runner.temp }}/publish/linux-x64
        working-directory: ./src/Web/

      - name: Build server for Linux ARM64
        run: |
          dotnet publish --configuration Release --runtime linux-arm64 --self-contained --output ${{ runner.temp }}/publish/linux-arm64
        working-directory: ./src/Web/

      # Uploading multiple builds of the application is slow, so we zip them first to speed up the process
      - name: Zip build files
        run: |
          cd publish
          zip -r ../server-builds.zip .
        working-directory: ${{ runner.temp }}

      - name: Cache backend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: server-builds
          path: ${{ runner.temp }}/server-builds.zip
          if-no-files-found: error

  build:
    runs-on: ubuntu-latest
    needs: [build-ui, build-server]
    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      - name: Download UI build artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: ui-build
          path: ${{ runner.temp }}/ui-build

      - name: Download server build artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: server-builds
          path: server-builds

      - name: Extract server build artifacts
        run: |
          unzip server-builds.zip -d ${{ runner.temp }}
        working-directory: server-builds

      - name: Copy UI files to server
        run: |
          mkdir -p linux-x64/wwwroot
          mkdir -p linux-arm64/wwwroot
          cp -r ui-build/* linux-x64/wwwroot
          cp -r ui-build/* linux-arm64/wwwroot
        shell: bash
        working-directory: ${{ runner.temp }}

      - name: Zip builds for upload
        run: |
          (cd linux-x64 && zip -r ../linux-x64.zip .)
          (cd linux-arm64 && zip -r ../linux-arm64.zip .)
        working-directory: ${{ runner.temp }}

      - name: Upload Linux x64 build
        uses: actions/upload-artifact@v4
        with:
          name: build-linux-x64
          path: ${{ runner.temp }}/linux-x64.zip

      - name: Upload Linux ARM64 build
        uses: actions/upload-artifact@v4
        with:
          name: build-linux-arm64
          path: ${{ runner.temp }}/linux-arm64.zip

  deploy:
    runs-on: self-hosted
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: ${{ vars.BUILD_ARTIFACT }}
          path: ${{ runner.temp }}

      - name: Unzip build artifact
        run: |
          unzip ${{ runner.temp }}/*.zip -d ${{ runner.temp }}/bin
        working-directory: ${{ runner.temp }}

      - name: JSON file transform
        uses: tnikFi/json-file-transform@v2
        with:
          files: ${{ runner.temp }}/bin/**/appsettings.json
          key-value-pairs: |
            Serilog.MinimumLevel.Override.Microsoft = Warning
            Serilog.WriteTo.1.Args.path = ${{ vars.LOG_FILE_PATH }}
            Discord.BotToken = ${{ secrets.DISCORD_BOT_TOKEN }}
            ConnectionStrings.DefaultConnection = ${{ secrets.DB_CONNECTION_STRING }}
            Authentication.Oauth.ClientSecret = ${{ secrets.OAUTH_CLIENT_SECRET }}
            Authentication.Oauth.ClientId = ${{ vars.CLIENT_ID }}
            Authentication.Oauth.RedirectUri = ${{ vars.REDIRECT_URI }}
            Authentication.Jwt.Issuer = ${{ vars.JWT_ISSUER }}
            Authentication.Jwt.Audience = ${{ vars.JWT_AUDIENCE }}
            Authentication.Jwt.SigningKey = ${{ secrets.JWT_SIGNING_KEY }}

      # Prevent accidentally removing all files in the filesystem
      # Learned this the hard way
      - name: Exit if SITE_ROOT is not set
        if: ${{ vars.SITE_ROOT == '' }}
        run: |
          echo "Variable SITE_ROOT is not set. Exiting to prevent data loss."
          exit 1
        env:
          SITE_ROOT: ${{ vars.SITE_ROOT }}

      - name: Stop the Kestrel service
        run: sudo systemctl stop ${{ vars.SERVICE_NAME }}

      - name: Clean up old files
        run: |
          rm -rf ${{ vars.SITE_ROOT }}/*

      - name: Copy new files
        run: |
          cp -r ${{ runner.temp }}/bin/* ${{ vars.SITE_ROOT }}

      - name: Start the Kestrel service
        run: sudo systemctl start ${{ vars.SERVICE_NAME }}
