name: Build

on:
  push:
    branches:
      - main
    paths-ignore:
      - .gitignore
      - README.md

  pull_request:
    branches:
      - main
    paths-ignore:
      - .gitignore
      - README.md

  workflow_call:
    inputs:
      build-artifacts:
        type: boolean
        default: false
        required: true

jobs:
  build-ui:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout code

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: src/ReactUi/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: src/ReactUi

      - name: ESLint
        run: npm run lint
        working-directory: src/ReactUi

      - name: Set up environment file for production
        run: |
          touch .env.production
          echo "VITE_GITHUB_URL=${{ github.server_url }}/${{ github.repository }}" >> .env.production
          echo "VITE_DOCUMENTATION_URL=${{ github.server_url }}/${{ github.repository }}/wiki" >> .env.production
          echo "VITE_BUG_REPORT_URL=${{ github.server_url }}/${{ github.repository }}/issues" >> .env.production
          echo "VITE_FEATURE_REQUEST_URL=${{ github.server_url }}/${{ github.repository }}/issues" >> .env.production
          echo "VITE_TOKEN_ENDPOINT=${{ vars.TOKEN_ENDPOINT }}" >> .env.production
          echo "VITE_LOGOUT_ENDPOINT=${{ vars.LOGOUT_ENDPOINT }}" >> .env.production
          echo "VITE_REDIRECT_URI=${{ vars.REDIRECT_URI }}" >> .env.production
          echo "VITE_CLIENT_ID=${{ vars.CLIENT_ID }}" >> .env.production
        working-directory: src/ReactUi

      - name: Output environment file
        run: cat .env.production
        working-directory: src/ReactUi

      - name: Build React application
        run: npm run build
        working-directory: src/ReactUi

      - name: Cache frontend build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ui-build
          path: src/ReactUi/dist

  build-server:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        name: Checkout code

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Install .NET
        uses: actions/setup-dotnet@v3

      - name: Restore solution
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Test solution
        run: dotnet test --no-build --configuration Release

      - name: Build server for Linux x64
        run: |
          dotnet publish --configuration Release --runtime linux-x64 --self-contained --output ./publish/linux-x64
        working-directory: ./src/Web/
      
      - name: Build server for Linux ARM64
        run: |
          dotnet publish --configuration Release --runtime linux-arm64 --self-contained --output ./publish/linux-arm64
        working-directory: ./src/Web/

      - name: Cache backend build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: server-build
          path: ./src/Web/publish
          if-no-files-found: error

  build:
    runs-on: ubuntu-latest
    needs: [build-ui, build-server]
    steps:
      - uses: actions/checkout@v3
        name: Checkout code

      - name: Download UI build artifacts
        uses: actions/download-artifact@v2
        with:
          name: ui-build
          path: ui-build
      
      - name: Download server build artifacts  
        uses: actions/download-artifact@v2
        with:
          name: server-build
          path: server-build

      - name: Copy UI files to server
        run: |
          mkdir -p server-build/linux-x64/wwwroot
          mkdir -p server-build/linux-arm64/wwwroot
          cp -r ui-build/* server-build/win-x64/wwwroot
          cp -r ui-build/* server-build/linux-x64/wwwroot
        shell: bash

      - name: Upload Linux x64 build
        uses: actions/upload-artifact@v2
        with:
          name: build-linux-x64
          path: server-build/linux-x64
      
      - name: Upload Linux ARM64 build
        uses: actions/upload-artifact@v2
        with:
          name: build-linux-arm64
          path: server-build/linux-arm64
